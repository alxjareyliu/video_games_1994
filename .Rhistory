qt(.1,42,F)
pf(3.6,df1=2,df2=124)
pf(119.6,df1=4,df2=204)
pf(119.6,df1=4,df2=204,F)
pf(119.6,df1=4,df2=204,lower = F)
pf(119.6, df1 = 4, df2 = 204, lower = F)
pf(3.6, df1 = 2, df2 = 124, lower = F)
KaggleMobileGames <- read.csv("~/Downloads/KaggleMobileGames.csv")
View(KaggleMobileGames)
summary(aov(KaggleMobileGames ~ Average.User.Rating, data = KaggleMobileGames))
summary(aov(Average.User.Rating ~ Age.Rating, data = KaggleMobileGames))
boxplot(Average.User.Rating ~ Age.Rating, data = KaggleMobileGames)
pi <- read.csv("~/Downloads/pi.csv", sep="")
View(pi)
View(KaggleMobileGames)
View(KaggleMobileGames)
View(pi)
evens <- pi[c(TRUE, FALSE)]
View(evens)
View(pi)
View(evens)
evens <- pi[c(T,F)]
View(evens)
View(pi)
View(evens)
View(pi)
pi[c(T,F)]
evens = pi[seq(1, length(pi),2)]
View(evens)
evens = evens[seq(1, length(evens),2)]
evens[c(T,F)]
evens[c(F,F)]
evens[c(F,T)]
evens[c(T,T)]
evens[c(T,F)]
evens = evens[c(T)]
evens = evens[c(T,F,T)]
evens = evens$digits[c(T,F)]
odds = evens
evens = pi$digits[c(F,T)]
mean(evens)
mean(odds)
t.test(evens, odds, alternative = "two.sided", var.equal = F)
t.test(evens, odds, alternative = "two.sided", var.equal = T)
odds = pi$digits[c(T,F)]
evens = pi$digits[c(F,T)]
t.test(evens,odds, alternative = "two-sided", var.equal = F)
t.test(evens,odds, alternative = "two.sided", var.equal = F)
odds = pi$digits[c(T,F)]
evens = pi$digits[c(F,T)]
t.test(evens,odds, alternative = "two.sided", var.equal = F)
digits = data.frame(evens,odds)
View(digits)
digits = data.frame()
TF = c(T,F)
digits = data.frame(pi,TF)
pi$new.col = TF
View(pi)
TF = c("Odd","Even")
pi$new.col = TF
pi$OddOrEven = TF
View(pi)
summary(aov(digits ~ OddOrEven, data = pi))
T = function(n) {
x1 = rnorm(100,1,1)
x2 = rnorm(100,0,1)
d = (mean(x1) - mean(x2))
s = (sd(x1) - sd(x2))
return(d/(s/sqrt(n)))
}
plot(replicate(1000,T(25)))
hist(replicate(1000,T(25)))
hist(replicate(1000,T(25)))
hist(replicate(1000,T(25)))
hist(replicate(1000,T(25)))
hist(replicate(1000,T(25)))
hist(replicate(1000,T(25)))
hist(replicate(1000,T(25)))
hist(replicate(1000,T(25)))
hist(replicate(1000,T(25)))
hist(replicate(1000,T(25)))
hist(replicate(1000,T(25)))
hist(replicate(1000,T(25)))
hist(replicate(1000,T(2)))
hist(replicate(1000,T(2)))
hist(replicate(1000,T(200)))
hist(replicate(1000,T(10000)))
hist(replicate(1000,T(10000)))
hist(replicate(1000,T(10000)))
hist(replicate(1000,T(200)))
T = function(n) {
x1 = rnorm(n,1,1)
x2 = rnorm(n,0,1)
d = (mean(x1) - mean(x2))
s = (sd(x1) - sd(x2))
return(d/(s/sqrt(n)))
}
hist(replicate(1000,T(100)))
hist(replicate(1000,T(100)))
hist(replicate(1000,T(100)))
hist(replicate(1000,T(100)))
hist(replicate(1000,T(100)))
hist(replicate(1000,T(5)))
hist(replicate(1000,T(5)))
hist(replicate(1000,T(5)))
hist(replicate(1000,T(5)))
hist(replicate(1000,T(5)))
hist(replicate(1000,T(5)))
hist(replicate(1000,T(5)))
View(pi)
View(KaggleMobileGames)
View(pi)
View(KaggleMobileGames)
nine = KaggleMobileGames[KaggleMobileGames$Age.Rating == "4+", ]
View(nine)
nine = KaggleMobileGames[KaggleMobileGames$Age.Rating == "9+", ]
four = KaggleMobileGames[KaggleMobileGames$Age.Rating == "4+", ]
twelve = KaggleMobileGames[KaggleMobileGames$Age.Rating == "12+", ]
seventeen = KaggleMobileGames[KaggleMobileGames$Age.Rating == "17+", ]
View(seventeen)
t.test(four,nine,alternative = "two.sided", var.equal = F)
t.test(four$Average.User.Rating,nine$Average.User.Rating,alternative = "two.sided", var.equal = F)
t.test(nine$Average.User.Rating,seventeen$Average.User.Rating,alternative = "two.sided", var.equal = F)
T = function(n) {
return (rt(10000,n))
}
F = function(n) {}
F = function(n) {
return(rf(10000,n))
}
TF = function(n) {
return(T(n)/F(n))
}
TF(100)
F = function(n) {
return(rf(10000,1,n))
}
TF(100)
mean(TF(100))
mean(TF(10))
mean(TF(1))
mean(TF(10000))
FT = function(n) {
return(F(n)/T(n))
}
mean(FT(1000))
mean(FT(10000))
mean(FT(100000))
mean(FT(100000))
mean(FT(100000))
mean(FT(100000))
mean(FT(100000))
mean(FT(100000))
mean(FT(100000))
mean(FT(100000))
mean(FT(100000))
mean(FT(100000))
mean(FT(100000))
mean(FT(100000))
mean(FT(100000))
mean(FT(100000))
mean(FT(100000))
mean(FT(100000))
hist(replicate(mean(FT(100000))))
hist(replicate(10000,mean(FT(100000))))
hist(replicate(1000,mean(FT(10000))))
boxplot(replicate(1000,mean(FT(10000))))
boxplot(replicate(1000,mean(FT(1000))))
View(TF)
View(TF)
TF = function(n) {
return(mean(replicate(10000,T(n)))/mean(replicate(10000,F(n))))
}
TF(100)
TF = function(n) {
return(mean(replicate(1000,T(n)))/mean(replicate(1000,F(n))))
}
TF(100)
TF(100)
TF(100)
hist(replicate(T(1000)))
hist((T(1000)))
hist((F(1000)))
TF = function(n) {
return(T(n)/F(n))
}
TF(1000)
mean(TF(100))
mean(TF(100))
mean(TF(100))
mean(TF(100))
mean(TF(100))
mean(TF(100))
mean(TF(100))
hist(replicate(TF(100)))
hist(replicate(1000,TF(100)))
hist(replicate(1000,TF(100)))
hist(replicate(10,TF(100)))
hist(replicate(1,TF(100)))
hist(replicate(2,TF(100)))
hist(replicate(1,TF(10)))
hist(replicate(100,TF(10)))
hist(replicate(100,TF(2)))
hist(replicate(10,TF(2)))
T(10)
hist(T(10))
hist(F(10))
hist(T(10))
hist(T(10000))
hist(F(10000))
mean(T(10000))/mean(F(10000))
mean(T(10000))/mean(F(10000))
mean(T(10000))/mean(F(10000))
mean(T(10000))/mean(F(10000))
mean(T(10000))/mean(F(10000))
mean(T(10000))/mean(F(10000))
mean(T(10000))/mean(F(10000))
mean(T(10000))/mean(F(10000))
mean(T(10000))/mean(F(10000))
mean(T(10000))/mean(F(10000))
mean(T(10000))/mean(F(10000))
mean(T(10000))/mean(F(10000))
mean(T(10000))/mean(F(10000))
mean(T(10000))
mean(T(10000))
mean(replicate(1000,mean(T(10000))))
mean(replicate(1000,mean(F(10000))))
mean(replicate(1000,mean(F(10000))))
View(`T`)
mean(F(10000))
sd(T(10000))
sd(F(10000))
sd(F(10000))
sd(F(10000))
mean(replicate(sd(F(10000))))
mean(replicate(1000,sd(F(10000))))
mean(replicate(1000,sd(F(10000))))
mean(replicate(1000,sd(F(10000))))
mean(replicate(1000,sd(F(10))))
sd(T(10))
sd(T(100))
sd(T(1000))
mean(replicate(1000,sd(F(1000))))
mean(replicate(1000,sd(F(100000))))
mean(replicate(1000,sd(F(15)))
mean(replicate(1000,sd(F(15))))
mean(replicate(1000,sd(F(15))))
View(`F`)
mean(F(1))
mean(F(1))
mean(F(1))
mean(F(1))
hist(F(2))
hist(F(3))
hist(F(4))
hist(F(4))
hist(F(5))
hist(F(6))
hist(F(7))
hist(F(20))
hist(T(20))
hist(T(2))
TF = function(n) {
return(mean(T(n))/mean(F(n)))
}
TF(1)
TF(1)
TF(1)
TF(1)
TF(1)
TF(2)
TF(3)
TF(4)
FT = function(n) {
return(mean(F(n))/mean(T(n)))
}
FT(2)
FT(3)
FT(4)
FT(4)
FT(4)
mean(replicate(10000,FT(2)))
mean(replicate(100,FT(2)))
mean(replicate(100,FT(2)))
mean(replicate(100,FT(2)))
mean(replicate(100,FT(2)))
mean(replicate(100,FT(2)))
mean(replicate(100,FT(2)))
mean(replicate(100,FT(2)))
sd(F(2))
sd(F(2))
sd(F(2))
sd(F(2))
sd(F(2))
sd(F(2))
sd(F(2))
sd(F(2))
sd(F(2))
sd(F(4))
sd(F(10))
sd(F(10))
sd(F(10))
sd(F(100))
sd(F(10000))
sd(F(10000))
sd(F(10000))
sd(F(10000))
View(KaggleMobileGames)
boxplot(Age.Rating ~ Average.User.Rating, data = KaggleMobileGames)
boxplot(Average.User.Rating ~ Age.Rating, data = KaggleMobileGames)
qnorm(.03,lower = F)
sqrt((83*17)/2000)
sqrt((83*17)/2000) * qnorm(.03, lower = F)
(sqrt((83*17)/2000) * qnorm(.03, lower = F)) + 17
pnorm(18.57975, 19, (sart((83*17)/2000)))
pnorm(18.57975, 19, (sqrt((83*17)/2000)))
pnorm(18.57975, 19, (sqrt((81*19)/2000)))
qnorm(.005)
?diff
pnorm(15.205,16,4/5)
qnorm(.005, 3.1, .5)
qnorm(.005, 3.1, .5, lower = F)
qnorm(.005, F)
qnorm(.005, low = F)
(4.388-2.93)/.5
(1.812-2.93)/.5
qnorm(.05,lower = F)
qnorm(.1)
.8*99.2
sqrt(.8*99.2)
sqrt(1.8*98.2)
qnorm(.95)
(2)^2
((qnorm(.95)*sqrt(.8*99.2)+(qnorm(.1)*sqrt(1.8*98.2))))^2
1.645*sqrt(.8*99.2)
-1.282*sqrt(1.8*98.2)
1.645*sqrt(.008*.992)
-1.282*sqrt(.018*.982)
.1465-.17044
((qnorm(.95)*sqrt(.8*99.2)-(qnorm(.1)*sqrt(1.8*98.2))))^2
((4.388-2.93)/(.5/sqrt(40)))
((1.812-2.93)/(.5/sqrt(40)))
qnorm(.005)
2.58*(.5/sqrt(40))
2.58*(.5/sqrt(40))+3.1
2.58*(.5/sqrt(40))-3.1
3.1-2.58*(.5/sqrt(40))
3.1-(2.58*(.5/sqrt(40)))
3.1+(2.58*(.5/sqrt(40)))
(3.304-2.93)/(.5/sqrt(40)))
(3.304-2.93)/(.5/sqrt(40))
(2.896-2.93)/(.5/sqrt(40))
us.counties <- read.csv("~/Desktop/Projects/covid-19-data-master/us-counties.csv")
View(us.counties)
`2020.csv` <- read.csv("~/Downloads/2020.csv.gz", header=FALSE)
View(`2020.csv`)
climdiv.norm.tmpccy.v1.0 <- read.table("~/Downloads/climdiv-norm-tmpccy-v1.0.0-20200304", quote="\"", comment.char="")
View(climdiv.norm.tmpccy.v1.0)
climdiv.norm.tmaxcy.v1.0 <- read.table("~/Downloads/climdiv-norm-tmaxcy-v1.0.0-20200304", quote="\"", comment.char="")
View(climdiv.norm.tmaxcy.v1.0)
View(`2020.csv`)
View(climdiv.norm.tmpccy.v1.0)
View(climdiv.norm.tmaxcy.v1.0)
View(climdiv.norm.tmaxcy.v1.0)
View(`2020.csv`)
getwd()
rnorm(1000000, 150.24, 8.44)
qnorm(.99, 150.24, 8.44)
qnorm(.99, 153.07, 9.24)
qnorm(.99, 3.55, 0.86)
getwd()
setwd("~/Programming/MATH189/hw2/MATH189_HW2/")
list.files()
source('~/Programming/MATH189/hw2/MATH189_HW2/hw2.R')
source('~/Programming/MATH189/hw2/MATH189_HW2/hw2.R')
